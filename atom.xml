<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tt的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-05-05T08:34:43.244Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>邓骏韬</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二分和前缀和笔记</title>
    <link href="http://example.com/2024/03/05/%E4%BA%8C%E5%88%86%E5%92%8C%E5%89%8D%E7%BC%80%E5%92%8C%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/03/05/%E4%BA%8C%E5%88%86%E5%92%8C%E5%89%8D%E7%BC%80%E5%92%8C%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-05T08:31:07.000Z</published>
    <updated>2024-05-05T08:34:43.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分模板"><a href="#二分模板" class="headerlink" title="二分模板"></a>二分模板</h2><p>二分模板一共有两个，分别适用于不同情况。<br>算法思路：假设目标值在闭区间[l, r]中， 每次将区间长度缩小一半，当l &#x3D; r时，我们就找到了目标值。</p><h4 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h4><p>当我们将区间[l, r]划分成[l, mid]和[mid + 1, r]时，其更新操作是r &#x3D; mid或者l &#x3D; mid + 1;，计算mid时不需要加1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">bsearch_1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (check(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h4><p>当我们将区间[l, r]划分成[l, mid - 1]和[mid, r]时，其更新操作是r &#x3D; mid - 1或者l &#x3D; mid;，此时为了防止死循环，计算mid时需要加1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">bsearch_2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (check(mid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="递增三元组"><a href="#递增三元组" class="headerlink" title="递增三元组"></a>递增三元组</h2><h4 id="给定三个整数数组"><a href="#给定三个整数数组" class="headerlink" title="给定三个整数数组"></a>给定三个整数数组</h4><p>$A &#x3D; [A_1, A_2, …, A_N]$,<br>$B &#x3D; [B_1, B_2, …, B_N]$,<br>$C &#x3D; [C_1, C_2, …, C_N]$,</p><p>请你统计有多少个三元组 $(i, j, k)$ 满足：</p><ol><li>$1 \leq i, j, k \leq N$  </li><li>$A_i &lt; B_j &lt; C_k$</li></ol><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><ul><li>第一行包含一个整数 $N$。</li><li>第二行包含 $N$ 个整数 $A_1, A_2, …, A_N$。</li><li>第三行包含 $N$ 个整数 $B_1, B_2, …, B_N$。</li><li>第四行包含 $N$ 个整数 $C_1, C_2, …, C_N$。</li></ul><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数表示答案。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1 \leq N \leq 10^5$,<br>$0 \leq A_i, B_i, C_i \leq 10^5$</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><p>3<br>1 1 1<br>2 2 2<br>3 3 3</p><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><p>27</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>关键在于：求一个数组中（A）有几个数小于B[i]。可用排序加2分，前缀和。</p><p>前缀和做法：</p><p>假设有一个数组a{3,1,3,2,5} 假设求比 3 小的个数。设一个数组b, b[a[i]]++, 则b{1,1,2,0,1}，再设数组c为数组b的前缀和， c{1,2,4,4,5}, 比 3 小的数的个数为：b[0]+b[1], 即c[1]&#x3D;2。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> a[<span class="hljs-number">3</span>][N];<br><span class="hljs-type">int</span> b1[N];<br><span class="hljs-type">int</span> b2[N];<br><span class="hljs-type">int</span> c1[N];<br><span class="hljs-type">int</span> c2[N];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> res;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br><span class="hljs-built_in">cin</span> &gt;&gt; a[i][j];<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>b1[a[<span class="hljs-number">0</span>][i]]++;<br>b2[a[<span class="hljs-number">2</span>][i]]++;<br>&#125;<br>c1[<span class="hljs-number">0</span>] = b1[<span class="hljs-number">0</span>];<br>c2[<span class="hljs-number">0</span>] = b2[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;=N<span class="hljs-number">-1</span>; i++) &#123;<br>c1[i] = b1[i] + c1[i - <span class="hljs-number">1</span>];<br>c2[i] = b2[i] + c2[i - <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-type">int</span> temp=a[<span class="hljs-number">1</span>][i];<br>        <span class="hljs-comment">//这个地方卡了好久，不加long long过不了：在这个特定的例子中，</span><br>        <span class="hljs-comment">// 假设 c1 和 c2 是整数数组，temp 和 N 是整数变量，res 是一个 long long </span><br>        <span class="hljs-comment">//  c1 和 c2 中的元素是 int 类型，而 res 是 long long 类型，那么进行乘法运算时，</span><br>        <span class="hljs-comment">//  可能需要将 int 类型的乘积累极转换为 long long 类型，</span><br>        <span class="hljs-comment">//  以避免可能的整数溢出或者确保结果的准确性。</span><br>res += (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)c1[temp - <span class="hljs-number">1</span>] * (c2[N<span class="hljs-number">-1</span>]-c2[temp]);<br>&#125;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; res;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>二分做法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> num[<span class="hljs-number">3</span>][N];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) <br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num[i][j]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i)<br>        sort(num[i]+<span class="hljs-number">1</span>, num[i]+n+<span class="hljs-number">1</span>);<br><br>    LL ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//枚举B，寻找A满足的个数以及C满足的个数相乘</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-type">int</span> key = num[<span class="hljs-number">1</span>][i];<br>        <span class="hljs-comment">//A中二分查找第一个小于key的数的下标</span><br>        <span class="hljs-type">int</span> pos1 = lower_bound(num[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>, num[<span class="hljs-number">0</span>]+n+<span class="hljs-number">1</span>, key)-num[<span class="hljs-number">0</span>]<span class="hljs-number">-1</span>;<br>        <span class="hljs-comment">//C中二分查找第一个大于key的数的下标</span><br>        <span class="hljs-type">int</span> pos2 = upper_bound(num[<span class="hljs-number">2</span>]+<span class="hljs-number">1</span>, num[<span class="hljs-number">2</span>]+n+<span class="hljs-number">1</span>, key)-num[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">if</span>(pos1 &gt;= <span class="hljs-number">1</span> &amp;&amp; pos2 &lt;= n) &#123;<br>            ans += (LL)pos1*(n-pos2+<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二分模板&quot;&gt;&lt;a href=&quot;#二分模板&quot; class=&quot;headerlink&quot; title=&quot;二分模板&quot;&gt;&lt;/a&gt;二分模板&lt;/h2&gt;&lt;p&gt;二分模板一共有两个，分别适用于不同情况。&lt;br&gt;算法思路：假设目标值在闭区间[l, r]中， 每次将区间长度缩小一半，当l </summary>
      
    
    
    
    
    <category term="编程笔记" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>递推递归笔记</title>
    <link href="http://example.com/2024/02/08/%E9%80%92%E6%8E%A8%E9%80%92%E5%BD%92%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/02/08/%E9%80%92%E6%8E%A8%E9%80%92%E5%BD%92%E7%AC%94%E8%AE%B0/</id>
    <published>2024-02-08T08:27:29.000Z</published>
    <updated>2024-05-05T08:34:44.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="递归实现组合型枚举"><a href="#递归实现组合型枚举" class="headerlink" title="递归实现组合型枚举"></a>递归实现组合型枚举</h2><p>从 1∼n<br> 这 n<br> 个整数中随机选出 m<br> 个，输出所有可能的选择方案。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>两个整数 n,m<br> ,在同一行用空格隔开。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>按照从小到大的顺序输出所有方案，每行 1个。</p><p>首先，同一行内的数升序排列，相邻两个数用一个空格隔开。</p><p>其次，对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面（例如 1 3 5 7 排在 1 3 6 8 前面）。</p><p>数据范围<br>n&gt;0<br> ,<br>0≤m≤n<br> ,<br>n+(n−m)≤25<br><img src="/img/image6.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">bool</span> sta[<span class="hljs-number">25</span>];<br><span class="hljs-type">int</span> p[<span class="hljs-number">25</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span>&#123;<br><span class="hljs-keyword">if</span>(u==m+<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;p[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br><br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-comment">//大于才往里放</span><br><span class="hljs-keyword">if</span>(i&gt;p[u<span class="hljs-number">-1</span>])&#123;<br><br><span class="hljs-keyword">if</span>(sta[i]!=<span class="hljs-literal">true</span>)&#123;<br>sta[i]=<span class="hljs-literal">true</span>;<br>p[u]=i;<br>dfs(u+<span class="hljs-number">1</span>);<br>sta[i]=<span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>dfs(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="带分数"><a href="#带分数" class="headerlink" title="带分数"></a>带分数</h2><p>$100$ 可以表示为带分数的形式：$100 &#x3D; 3 + \frac{69258}{714}$</p><p>$100$ 还可以表示为：$100 &#x3D; 82 + \frac{3546}{197}$</p><p>注意特征：带分数中，数字 $1 \sim 9$ 分别出现且只出现一次（不包含 $0$）。</p><p>类似这样的带分数，$100$ 有 $11$ 种表示法。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>一个正整数。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出输入数字用数码 $1 \sim 9$ 不重复不遗漏地组成带分数表示的全部种数。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1 \le N &lt; 10^6$</p><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><p>100</p><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><p>11</p><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><p>105</p><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><p>6</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> tar, num=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span> &#125;;<br><span class="hljs-type">int</span> b[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span> &#125;;<br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; tar;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">//first 找分割线</span><br><span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br><span class="hljs-comment">//second</span><br>x = x * <span class="hljs-number">10</span> + a[i];<br><span class="hljs-type">int</span> y = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">8</span>; j++) &#123;<br>y = y * <span class="hljs-number">10</span> + a[j];<br><span class="hljs-type">int</span> z = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = j + <span class="hljs-number">1</span>; k &lt; <span class="hljs-number">9</span>; k++) z = z * <span class="hljs-number">10</span> + a[k];<br><span class="hljs-keyword">if</span> (x + (y / z) == tar &amp;&amp; y % z == <span class="hljs-number">0</span>) num++;<br><span class="hljs-comment">//cout &lt;&lt; &quot;x: &quot; &lt;&lt; x &lt;&lt; &quot;  y: &quot; &lt;&lt; y &lt;&lt; &quot;  z: &quot; &lt;&lt; z &lt;&lt; endl;</span><br>&#125;<br><br>&#125;<br><br>next_permutation(a, a + <span class="hljs-number">9</span>);<span class="hljs-comment">//全排列数组的某一部分</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;new a:&quot;;</span><br><span class="hljs-comment">/*for (int i = 0; i &lt; 9; i++) &#123;</span><br><span class="hljs-comment">cout &lt;&lt; a[i];</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">cout &lt;&lt; endl;*/</span><br><br><span class="hljs-type">bool</span> flag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>;i++) &#123;<br><span class="hljs-keyword">if</span> (a[i] != b[i]) &#123;<br>flag = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!flag) <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; num;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;递归实现组合型枚举&quot;&gt;&lt;a href=&quot;#递归实现组合型枚举&quot; class=&quot;headerlink&quot; title=&quot;递归实现组合型枚举&quot;&gt;&lt;/a&gt;递归实现组合型枚举&lt;/h2&gt;&lt;p&gt;从 1∼n&lt;br&gt; 这 n&lt;br&gt; 个整数中随机选出 m&lt;br&gt; 个，输出所有可能的</summary>
      
    
    
    
    
    <category term="编程笔记" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>dp笔记</title>
    <link href="http://example.com/2024/02/05/dp%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/02/05/dp%E7%AC%94%E8%AE%B0/</id>
    <published>2024-02-05T08:19:30.000Z</published>
    <updated>2024-05-05T09:03:27.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dp问题"><a href="#dp问题" class="headerlink" title="dp问题"></a>dp问题</h1><p>满足最优子结构：不管过去状态和决策如何，对前面的决策所形成的状态而言，余下的诸决策必须构成最优策略。</p><p>无后效性：以前各阶段的状态无法直接影响它未来的决策。</p><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p>有 N件物品和一个容量是 V的背包。每件物品只能使用一次。<br>第 <strong>i</strong> 件物品的体积是 <strong>v_i</strong>，价值是 <strong>w_i</strong>。<br>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p><h4>输入格式</h4>第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。接下来有 N 行，每行两个整数 v_i, w_i，用空格隔开，分别表示第 i 件物品的体积和价值。<h4>输出格式</h4>输出一个整数，表示最大价值。<h4>数据范围</h4><p>0&lt;N,V≤1000</p><p>0&lt;vi,wi≤1000</p><p><img src="/img/image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> w[<span class="hljs-number">1010</span>],v[<span class="hljs-number">1010</span>];<br><span class="hljs-type">int</span> f[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++)&#123;<br>            <span class="hljs-keyword">if</span>(j&lt;w[i]) f[i][j]=f[i<span class="hljs-number">-1</span>][j];<br>            <span class="hljs-keyword">else</span>&#123;<br>                f[i][j]=max(f[i<span class="hljs-number">-1</span>][j],f[i<span class="hljs-number">-1</span>][j-w[i]]+v[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;f[n][m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>当每种类别有s个物品,多重背包问题。</p><p><img src="/img/image-1.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> f[N][N]=&#123;&#125;;<br><span class="hljs-type">int</span> s[N],v[N],w[N];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;v[i]&gt;&gt;w[i]&gt;&gt;s[i];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=s[i];k++)&#123;<br>                <span class="hljs-keyword">if</span>(j&lt;k*v[i]) f[i][j]=f[i-k][j];<br>                <span class="hljs-keyword">else</span> f[i][j]=max(f[i<span class="hljs-number">-1</span>][j],f[i<span class="hljs-number">-1</span>][j-k*v[i]]+k*w[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;f[n][m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="摘花生"><a href="#摘花生" class="headerlink" title="摘花生"></a>摘花生</h2><p>Hello Kitty想摘点花生送给她喜欢的米老鼠。</p><p>她来到一片有网格状道路的矩形花生地(如下图)，从西北角进去，东南角出来。</p><p>地里每个道路的交叉点上都有种着一株花生苗，上面有若干颗花生，经过一株花生苗就能摘走该它上面所有的花生。</p><p>Hello Kitty只能向东或向南走，不能向西或向北走。</p><p>问Hello Kitty最多能够摘到多少颗花生。</p><p><img alt="1.gif" src="https://cdn.acwing.com/media/article/image/2019/09/12/19_a8509f26d5-1.gif" /> </p><h4>输入格式</h4><p>第一行是一个整数T，代表一共有多少组数据。</p><p>接下来是T组数据。</p><p>每组数据的第一行是两个整数，分别代表花生苗的行数R和列数 C。</p><p>每组数据的接下来R行数据，从北向南依次描述每行花生苗的情况。每行数据有C个整数，按从西向东的顺序描述了该行每株花生苗上的花生数目M。</p><h4>输出格式</h4><p>对每组输入数据，输出一行，内容为Hello Kitty能摘到得最多的花生颗数。</p><h4>数据范围</h4>1≤T≤100,1≤R,C≤100,0≤M≤1000<p><img src="/img/image-3.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> f[N][N];<br><br><span class="hljs-type">int</span> a[N][N];<br><span class="hljs-type">int</span> n,m;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> t;<br><span class="hljs-built_in">cin</span>&gt;&gt;t;<br><span class="hljs-keyword">while</span>(t--)&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;a[i][j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;m;j++)&#123;<br>f[i][j]=max(f[i<span class="hljs-number">-1</span>][j],f[i][j<span class="hljs-number">-1</span>])+a[i][j];<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;f[n<span class="hljs-number">-1</span>][m<span class="hljs-number">-1</span>]&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="偷商店"><a href="#偷商店" class="headerlink" title="偷商店"></a>偷商店</h2><p>阿福是一名经验丰富的大盗。趁着月黑风高，阿福打算今晚洗劫一条街上的店铺。<br>这条街上一共有 N 家店铺，每家店中都有一些现金。<br>阿福事先调查得知，只有当他同时洗劫了两家相邻的店铺时，街上的报警系统才会启动，然后警察就会蜂拥而至。<br>作为一向谨慎作案的大盗，阿福不愿意冒着被警察追捕的风险行窃。<br>他想知道，在不惊动警察的情况下，他今晚最多可以得到多少现金?</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行是一个整数 T，表示一共有 T 组数据。接下来的每组数据，第一行是一个整数 N ，表示一共有 N 家店铺。第二行是 N 个被空格分开的正整数，表示每一家店铺中的现金数元。</p><p>每家店铺中的现金数量均不超过1000。</p><p>imput tamples:</p><p>2</p><p>3</p><p>1 8 2</p><p>4</p><p>10 7 6 14 </p><p>result:</p><p>8</p><p>24</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span> </span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; money)</span>&#123;<br><span class="hljs-type">int</span> dp[<span class="hljs-number">200</span>]=&#123;&#125;;<br>dp[<span class="hljs-number">0</span>]=money[<span class="hljs-number">0</span>];<br><span class="hljs-type">int</span> n=money.size();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span> ;i&lt;n;++i)&#123;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;<br>dp[<span class="hljs-number">1</span>]=max(money[<span class="hljs-number">0</span>],money[<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>dp[i]=max(dp[i<span class="hljs-number">-1</span>],dp[i<span class="hljs-number">-2</span>]+money[i]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> dp[n<span class="hljs-number">-1</span>];<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; money;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; &gt; group;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> tem=n;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; res;<br><span class="hljs-type">int</span> a[<span class="hljs-number">50</span>];<br><span class="hljs-keyword">while</span>(tem!=<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;a[tem];<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">cin</span>&gt;&gt;i)&#123;<br>money.push_back(i);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">cin</span>.get()==<span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-keyword">break</span>;<br>&#125;<br>group.push_back(money);<br>money.clear();<br>tem--;<br>&#125;<br><span class="hljs-keyword">while</span>(tem!=n)&#123;<br><br> res.push_back(rob(group[tem]));<br>tem++;<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::iterator it;<br><span class="hljs-keyword">for</span>(it=res.begin();it!=res.end();++it)<br><span class="hljs-built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="地宫取宝"><a href="#地宫取宝" class="headerlink" title="地宫取宝"></a>地宫取宝</h2><p>X 国王有一个地宫宝库，是 n×m个格子的矩阵，每个格子放一件宝贝，每个宝贝贴着价值标签。</p><p>地宫的入口在左上角，出口在右下角。</p><p>小明被带到地宫的入口，国王要求他只能向右或向下行走。</p><p>走过某个格子时，如果那个格子中的宝贝价值比小明手中任意宝贝价值都大，小明就可以拿起它（当然，也可以不拿）。</p><p>当小明走到出口时，如果他手中的宝贝恰好是 k<br> 件，则这些宝贝就可以送给小明。</p><p>请你帮小明算一算，在给定的局面下，他有多少种不同的行动方案能获得这 k件宝贝。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行 3<br> 个整数，n,m,k<br>，含义见题目描述。</p><p>接下来 n<br> 行，每行有 m<br> 个整数 Ci<br> 用来描述宝库矩阵每个格子的宝贝价值。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示正好取 k<br> 个宝贝的行动方案数。</p><p>该数字可能很大，输出它对 1000000007<br> 取模的结果。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,m≤50<br>,<br>1≤k≤12<br>,<br>0≤Ci≤12<br>![]&#x2F;img&#x2F;(image-4.png)<br><img src="/img/image-5.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">55</span>, MOD =<span class="hljs-number">100000007</span>;<br><br><span class="hljs-type">int</span> n,m,k;<br><span class="hljs-type">int</span> w[N][N];<br><span class="hljs-type">int</span> f[N][N][<span class="hljs-number">13</span>][<span class="hljs-number">14</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;w[i][j];<br>w[i][j]++;<br>&#125;<br>&#125;<br><br>f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][w[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]]=<span class="hljs-number">1</span>;<br>f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> u=<span class="hljs-number">0</span>;u&lt;=k;u++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> v=<span class="hljs-number">0</span>;v&lt;=<span class="hljs-number">13</span>;v++)&#123;<br><span class="hljs-type">int</span> &amp;val=f[i][j][u][v];<br>val=(val+f[i<span class="hljs-number">-1</span>][j][u][v])%MOD;<br>val=(val+f[i][j<span class="hljs-number">-1</span>][u][v])%MOD;<br><span class="hljs-keyword">if</span>(u&gt;<span class="hljs-number">0</span>&amp;&amp; v==w[i][j])&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c=<span class="hljs-number">0</span>;c&lt;v;c++)&#123;<br>val=(val+f[i<span class="hljs-number">-1</span>][j][u<span class="hljs-number">-1</span>][c])%MOD;<br>val=(val+f[i][j<span class="hljs-number">-1</span>][u<span class="hljs-number">-1</span>][c])%MOD;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">13</span>;i++) res=(res+f[n][m][k][i])%MOD;<br><span class="hljs-built_in">cout</span>&lt;&lt;res;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;dp问题&quot;&gt;&lt;a href=&quot;#dp问题&quot; class=&quot;headerlink&quot; title=&quot;dp问题&quot;&gt;&lt;/a&gt;dp问题&lt;/h1&gt;&lt;p&gt;满足最优子结构：不管过去状态和决策如何，对前面的决策所形成的状态而言，余下的诸决策必须构成最优策略。&lt;/p&gt;
&lt;p&gt;无后效性</summary>
      
    
    
    
    
    <category term="编程笔记" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>常见模板</title>
    <link href="http://example.com/2023/08/05/%E5%B8%B8%E8%A7%81%E6%A8%A1%E6%9D%BF/"/>
    <id>http://example.com/2023/08/05/%E5%B8%B8%E8%A7%81%E6%A8%A1%E6%9D%BF/</id>
    <published>2023-08-05T08:30:33.000Z</published>
    <updated>2024-05-05T08:34:42.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h2><p>给定 $n$ 个区间 $[l_i, r_i]$，要求合并所有有交集的区间。注意如果在端点处相交，也算有交集。输出合并完成后的区间个数。例如：$[1,3]$ 和 $[2,6]$ 可以合并为一个区间 $[1,6]$。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><ul><li>第一行包含整数 $n$。</li><li>接下来 $n$ 行，每行包含两个整数 $l$ 和 $r$。</li></ul><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含一个整数，表示合并区间完成后的区间个数。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1 \leq n \leq 100000$,<br>$-10^9 \leq l_i \leq r_i \leq 10^9$</p><p>输入样例：</p><p>5</p><p>1 2</p><p>2 4</p><p>5 6</p><p>7 8</p><p>7 9</p><p>输出样例：</p><p>3</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 将所有存在交集的区间合并</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;PII&gt; &amp;segs)</span><br>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;PII&gt; res;<br><br>    sort(segs.begin(), segs.end());<br><br>    <span class="hljs-type">int</span> st = <span class="hljs-number">-2e9</span>, ed = <span class="hljs-number">-2e9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> seg : segs)<br>        <span class="hljs-keyword">if</span> (ed &lt; seg.first)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.push_back(&#123;st, ed&#125;);<br>            st = seg.first, ed = seg.second;<br>        &#125;<br>        <span class="hljs-keyword">else</span> ed = max(ed, seg.second);<br><br>    <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.push_back(&#123;st, ed&#125;);<br><br>    segs = res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (i &lt; j)<br>    &#123;<br>        <span class="hljs-keyword">do</span> i ++ ; <span class="hljs-keyword">while</span> (q[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j -- ; <span class="hljs-keyword">while</span> (q[j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) swap(q[i], q[j]);<br>    &#125;<br>    quick_sort(q, l, j), quick_sort(q, j + <span class="hljs-number">1</span>, r);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    merge_sort(q, l, mid);<br>    merge_sort(q, mid + <span class="hljs-number">1</span>, r);<br><br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class="hljs-keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];<br>        <span class="hljs-keyword">else</span> tmp[k ++ ] = q[j ++ ];<br><br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];<br><br>    <span class="hljs-keyword">for</span> (i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="整数二分模板"><a href="#整数二分模板" class="headerlink" title="整数二分模板"></a>整数二分模板</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<span class="hljs-comment">/* ... */</span>&#125; <span class="hljs-comment">// 检查x是否满足某种性质</span><br><br><span class="hljs-comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">bsearch_1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (check(mid)) r = mid;    <span class="hljs-comment">// check()判断mid是否满足性质</span><br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><span class="hljs-comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">bsearch_2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (check(mid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="浮点数二分模板"><a href="#浮点数二分模板" class="headerlink" title="浮点数二分模板"></a>浮点数二分模板</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> &#123;<span class="hljs-comment">/* ... */</span>&#125; <span class="hljs-comment">// 检查x是否满足某种性质</span><br><br><span class="hljs-type">double</span> <span class="hljs-title function_">bsearch_3</span><span class="hljs-params">(<span class="hljs-type">double</span> l, <span class="hljs-type">double</span> r)</span><br>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-6</span>;   <span class="hljs-comment">// eps 表示精度，取决于题目对精度的要求</span><br>    <span class="hljs-keyword">while</span> (r - l &gt; eps)<br>    &#123;<br>        <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (check(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">求n的第k位数字: n &gt;&gt; k &amp; <span class="hljs-number">1</span><br>返回n的最后一位<span class="hljs-number">1</span>：lowbit(n) = n &amp; -n<br></code></pre></td></tr></table></figure><h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> g[N][N];  <span class="hljs-comment">// 存储每条边</span><br><span class="hljs-type">int</span> dist[N];  <span class="hljs-comment">// 存储1号点到每个点的最短距离</span><br><span class="hljs-type">bool</span> st[N];   <span class="hljs-comment">// 存储每个点的最短路是否已经确定</span><br><br><span class="hljs-comment">// 求1号点到n号点的最短路，如果不存在则返回-1</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dijkstra</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;     <span class="hljs-comment">// 在还未确定最短路的点中，寻找距离最小的点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<br>                t = j;<br><br>        <span class="hljs-comment">// 用t更新其他点的距离</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            dist[j] = min(dist[j], dist[t] + g[t][j]);<br><br>        st[t] = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="筛质数"><a href="#筛质数" class="headerlink" title="筛质数"></a>筛质数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-type">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;区间合并&quot;&gt;&lt;a href=&quot;#区间合并&quot; class=&quot;headerlink&quot; title=&quot;区间合并&quot;&gt;&lt;/a&gt;区间合并&lt;/h2&gt;&lt;p&gt;给定 $n$ 个区间 $[l_i, r_i]$，要求合并所有有交集的区间。注意如果在端点处相交，也算有交集。输出合并完成后的</summary>
      
    
    
    
    
    <category term="编程笔记" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2023 CGJ GAMEJAM / TOUCH</title>
    <link href="http://example.com/2023/05/11/2023-CGJ-GAMEJAM-TOUCH/"/>
    <id>http://example.com/2023/05/11/2023-CGJ-GAMEJAM-TOUCH/</id>
    <published>2023-05-11T13:22:11.000Z</published>
    <updated>2024-05-11T13:43:03.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2023-北京"><a href="#2023-北京" class="headerlink" title="2023 北京"></a>2023 北京</h3><h3 id="主题：-touch"><a href="#主题：-touch" class="headerlink" title="主题： touch"></a>主题： touch</h3><h3 id="作品名：-从两眼一黑开始的非异世界冒险"><a href="#作品名：-从两眼一黑开始的非异世界冒险" class="headerlink" title="作品名： 从两眼一黑开始的非异世界冒险"></a>作品名： 从两眼一黑开始的非异世界冒险</h3><p>两眼一黑后到了迷之空间的主人公通过不断拓展被自身认知的物品库，构建独特的场景。对“TOUCH”到的世界，主观地加上在“TOUCH”中获得的“SENSE”，来“RECREATE”认知到的世界，从而找到“离开”的方法。<br>Windows平台，wasd移动，右键交互，剩下的全交给左键了。</p><h3 id="类型：-解密"><a href="#类型：-解密" class="headerlink" title="类型： 解密"></a>类型： 解密</h3><h3 id="担任美术，完成主角建模，-绑骨骼，-动画及控制；游戏开始界面，背景，关卡的设计及搭建。"><a href="#担任美术，完成主角建模，-绑骨骼，-动画及控制；游戏开始界面，背景，关卡的设计及搭建。" class="headerlink" title="担任美术，完成主角建模， 绑骨骼， 动画及控制；游戏开始界面，背景，关卡的设计及搭建。"></a>担任美术，完成主角建模， 绑骨骼， 动画及控制；游戏开始界面，背景，关卡的设计及搭建。</h3><h3 id="游戏截图："><a href="#游戏截图：" class="headerlink" title="游戏截图："></a>游戏截图：</h3><p><img src="/img/k1.png" alt="关卡1"><br><img src="/img/k2.png" alt="关卡2"><br><img src="/img/k3.png" alt="关卡2"></p><h3 id="游戏演示视频"><a href="#游戏演示视频" class="headerlink" title="游戏演示视频"></a>游戏演示视频</h3><p><a href="https://www.bilibili.com/video/BV1qF411X7yv/?spm_id_from=333.999.0.0&vd_source=2f31a90dea8ca43e5de5b5fb60f56646">https://www.bilibili.com/video/BV1qF411X7yv/?spm_id_from=333.999.0.0&amp;vd_source=2f31a90dea8ca43e5de5b5fb60f56646</a></p><iframe src="//player.bilibili.com/player.html?aid=273194291&bvid=BV1qF411X7yv&cid=1190616983&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="400px"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;2023-北京&quot;&gt;&lt;a href=&quot;#2023-北京&quot; class=&quot;headerlink&quot; title=&quot;2023 北京&quot;&gt;&lt;/a&gt;2023 北京&lt;/h3&gt;&lt;h3 id=&quot;主题：-touch&quot;&gt;&lt;a href=&quot;#主题：-touch&quot; class=&quot;header</summary>
      
    
    
    
    <category term="游戏开发" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>789数的范围</title>
    <link href="http://example.com/2023/03/09/789%E6%95%B0%E7%9A%84%E8%8C%83%E5%9B%B4/"/>
    <id>http://example.com/2023/03/09/789%E6%95%B0%E7%9A%84%E8%8C%83%E5%9B%B4/</id>
    <published>2023-03-09T08:43:34.000Z</published>
    <updated>2024-05-05T08:12:09.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给定一个按照升序排列的长度为 n 的整数数组，以及 q 个查询。</p><p>对于每个查询，返回一个元素 k 的起始位置和终止位置（位置从 0 开始计数）。</p><p>如果数组中不存在该元素，则返回 -1 -1。</p><p>原题链接：<a href="https://www.acwing.com/problem/content/791/">https://www.acwing.com/problem/content/791/</a></p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><ul><li>第一行包含整数 n 和 q，表示数组长度和询问个数。</li><li>第二行包含 n 个整数（均在 1∼10000 范围内），表示完整数组。</li><li>接下来 q 行，每行包含一个整数 k，表示一个询问元素。</li></ul><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>共 q 行，每行包含两个整数，表示所求元素的起始位置和终止位置。</p><p>如果数组中不存在该元素，则返回 -1 -1。</p><h1 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h1><ul><li>1≤n≤100000</li><li>1≤q≤10000</li><li>1≤k≤10000</li></ul><h1 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h1><p>6 3<br>1 2 2 3 3 4<br>3<br>4<br>5</p><h1 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h1><p>3 4<br>5 5<br>-1 -1</p><h1 id="我的题解"><a href="#我的题解" class="headerlink" title="我的题解"></a>我的题解</h1><pre><code class="hljs">#include&lt;iostream&gt;using namespace std;int num, n_q;int arr[100010];int q[10010];int minx, maxx;void find(int q, int l, int r) &#123;        for (int i = l; i &lt;= r; i++) &#123;        if (arr[i] == q) &#123;            minx = i;            break;        &#125;    &#125;    for (int i = r; i &gt;= l; i--)    &#123;        if (arr[i] == q) &#123;            maxx = i;            break;        &#125;    &#125;&#125;void query(int q, int l, int r) &#123;    if (l == r) &#123;        if(arr[l]==q) &#123;            maxx = minx = l;        &#125;                return;    &#125;    int mid = (l + r) / 2;    if (q &lt; arr[mid]) query(q, l, mid);    if (q &gt; arr[mid]) query(q, mid + 1, r);    if (q == arr[mid]) find(q, l, r);&#125;int main() &#123;    cin &gt;&gt; num &gt;&gt; n_q;    for (int i = 0; i &lt; num; i++) &#123;        cin &gt;&gt; arr[i];    &#125;    for (int i = 0; i &lt; n_q; i++) &#123;        cin &gt;&gt; q[i];    &#125;    for (int i = 0; i &lt; n_q; i++) &#123;        maxx = -1; minx = num;        query(q[i], 0, num - 1);        if (maxx == -1) &#123;            minx = -1;        &#125;        cout &lt;&lt; minx &lt;&lt; &quot; &quot; &lt;&lt; maxx &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre><p>运用了类似归并的思想，刚开始的做法超时，于是加上了当数字串中相同元素较多时的解决方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;给定一个按照升序排列的长度为 n 的整数数组，以及 q 个查询。&lt;/p&gt;
&lt;p&gt;对于每个查询，返回一个元素 k 的起始位置和</summary>
      
    
    
    
    
    <category term="编程笔记" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
